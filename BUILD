
# Lang library
cc_library(
    name = "tc_lang",
    srcs = ["tc/lang/parser.cc", "tc/lang/lexer.cc", "tc/lang/tc_format.cc"],
    hdrs = glob(["tc/lang/*.h", "tc/utils/*.h"]),
)

# "Version" library TODO: static only
genrule(
    name = "config_version_cc",
    srcs = ["tc/version/version.cc.in"],
    outs = ["tc/version/version.cc"],
    cmd = "TARGET=`realpath $@` TC_V_PATH=`realpath $<`; TC_V_DIR=`dirname $$TC_V_PATH`; cd $$TC_V_DIR; cat version.cc.in | sed -e \"s/@GIT_DESCRIPTION@/\"`git rev-parse HEAD`\"/\" > $$TARGET"
)

cc_library(
    name = "tc_version",
    srcs = ["tc/version/version.cc"],
    hdrs = ["tc/version/version.h"],
    data = [":config_version_cc"],
    copts = ["-Itc/version"],
)

# isl
# TODO fix local includes
cc_library(
    name = "tc_isl",
    srcs = [
    "third-party/islpp/basis_reduction_tab.c",
    "third-party/islpp/isl_aff.c",
    "third-party/islpp/isl_aff_map.c",
    "third-party/islpp/isl_affine_hull.c",
    "third-party/islpp/isl_arg.c",
    "third-party/islpp/isl_ast_build.c",
    "third-party/islpp/isl_ast_build_expr.c",
    "third-party/islpp/isl_ast.c",
    "third-party/islpp/isl_ast_codegen.c",
    "third-party/islpp/isl_ast_graft.c",
    "third-party/islpp/isl_bernstein.c",
    "third-party/islpp/isl_blk.c",
    "third-party/islpp/isl_bound.c",
    "third-party/islpp/isl_box.c",
    "third-party/islpp/isl_coalesce.c",
    "third-party/islpp/isl_constraint.c",
    "third-party/islpp/isl_convex_hull.c",
    "third-party/islpp/isl_ctx.c",
    "third-party/islpp/isl_deprecated.c",
    "third-party/islpp/isl_dim_map.c",
    "third-party/islpp/isl_equalities.c",
    "third-party/islpp/isl_factorization.c",
    "third-party/islpp/isl_farkas.c",
    "third-party/islpp/isl_ffs.c",
    "third-party/islpp/isl_flow.c",
    "third-party/islpp/isl_fold.c",
    "third-party/islpp/isl_hash.c",
    "third-party/islpp/isl_id.c",
    "third-party/islpp/isl_id_to_ast_expr.c",
    "third-party/islpp/isl_id_to_id.c",
    "third-party/islpp/isl_id_to_pw_aff.c",
    "third-party/islpp/isl_ilp.c",
    "third-party/islpp/isl_input.c",
    "third-party/islpp/isl_local.c",
    "third-party/islpp/isl_local_space.c",
    "third-party/islpp/isl_lp.c",
    "third-party/islpp/isl_map.c",
    "third-party/islpp/isl_map_list.c",
    "third-party/islpp/isl_map_simplify.c",
    "third-party/islpp/isl_map_subtract.c",
    "third-party/islpp/isl_map_to_basic_set.c",
    "third-party/islpp/isl_mat.c",
    "third-party/islpp/isl_morph.c",
    "third-party/islpp/isl_obj.c",
    "third-party/islpp/isl_options.c",
    "third-party/islpp/isl_output.c",
    "third-party/islpp/isl_point.c",
    "third-party/islpp/isl_polynomial.c",
    "third-party/islpp/isl_printer.c",
    "third-party/islpp/isl_range.c",
    "third-party/islpp/isl_reordering.c",
    "third-party/islpp/isl_sample.c",
    "third-party/islpp/isl_scan.c",
    "third-party/islpp/isl_schedule.c",
    "third-party/islpp/isl_schedule_band.c",
    "third-party/islpp/isl_schedule_node.c",
    "third-party/islpp/isl_schedule_read.c",
    "third-party/islpp/isl_schedule_tree.c",
    "third-party/islpp/isl_scheduler.c",
    "third-party/islpp/isl_schedule_constraints.c",
    "third-party/islpp/isl_seq.c",
    "third-party/islpp/isl_set_list.c",
    "third-party/islpp/isl_sort.c",
    "third-party/islpp/isl_space.c",
    "third-party/islpp/isl_stream.c",
    "third-party/islpp/isl_stride.c",
    "third-party/islpp/isl_system.c",
    "third-party/islpp/isl_tab.c",
    "third-party/islpp/isl_tab_pip.c",
    "third-party/islpp/isl_tarjan.c",
    "third-party/islpp/isl_transitive_closure.c",
    "third-party/islpp/isl_union_map.c",
    "third-party/islpp/isl_val.c",
    "third-party/islpp/isl_vec.c",
    "third-party/islpp/isl_version.c",
    "third-party/islpp/isl_vertices.c",
    "third-party/islpp/print.c",
    "third-party/islpp/isl_gmp.c",
    "third-party/islpp/isl_val_gmp.c"],
    hdrs = glob(["third-party/islpp/include/isl/*h",
                 "third-party/islpp/*.h",
                 "isl_interface/include/isl/*.h",
                 "isl_interface/include/*.h",
                 "third-party/islpp/*templ*.c",
                 "third-party/islpp/include/isl/*templ*.c",
                 "third-party/islpp/*_to_*.c",
                 "third-party/islpp/*_from_*.c",
                 "third-party/islpp/extract_key.c",
                 "third-party/islpp/isl_multi_no_explicit_domain.c",
                 "third-party/islpp/isl_pw_eval.c",
                 "third-party/islpp/isl_union_single.c",
                 "third-party/islpp/isl_multi_dims.c",
                 "third-party/islpp/isl_union_eval.c",
                 "third-party/islpp/isl_union_neg.c",
                 "third-party/islpp/isl_pw_hash.c",
                 "third-party/islpp/isl_pw_union_opt.c",
            "third-party/islpp/isl_pw_eval.c",
            "third-party/islpp/isl_pw_hash.c",
            "third-party/islpp/isl_pw_union_opt.c",
            "third-party/islpp/isl_union_single.c",
            "third-party/islpp/isl_union_neg.c",
            "third-party/islpp/isl_multi_no_explicit_domain.c",
            "third-party/islpp/isl_multi_apply_set.c",
            "third-party/islpp/isl_multi_cmp.c",
            "third-party/islpp/isl_multi_dims.c",
            "third-party/islpp/isl_multi_floor.c",
            "third-party/islpp/isl_multi_gist.c",
            "third-party/islpp/isl_pw_union_opt.c",
            "third-party/islpp/isl_union_multi.c",
            "third-party/islpp/isl_union_neg.c",
            "third-party/islpp/isl_multi_explicit_domain.c",
            "third-party/islpp/isl_multi_pw_aff_explicit_domain.c",
            "third-party/islpp/isl_multi_apply_set.c",
            "third-party/islpp/isl_multi_coalesce.c",
            "third-party/islpp/isl_multi_dims.c",
            "third-party/islpp/isl_multi_gist.c",
            "third-party/islpp/isl_multi_hash.c",
            "third-party/islpp/isl_multi_align_set.c",
            "third-party/islpp/isl_multi_intersect.c",
            "third-party/islpp/isl_multi_explicit_domain.c",
            "third-party/islpp/isl_multi_union_pw_aff_explicit_domain.c",
            "third-party/islpp/isl_multi_apply_set.c",
            "third-party/islpp/isl_multi_apply_union_set.c",
            "third-party/islpp/isl_multi_coalesce.c",
            "third-party/islpp/isl_multi_floor.c",
            "third-party/islpp/isl_multi_gist.c",
            "third-party/islpp/isl_multi_align_set.c",
            "third-party/islpp/isl_multi_align_union_set.c",
            "third-party/islpp/isl_multi_intersect.c",
            "third-party/islpp/isl_pw_eval.c",
            "third-party/islpp/isl_union_single.c",
            "third-party/islpp/isl_union_eval.c",
            "third-party/islpp/isl_multi_no_explicit_domain.c",
            "third-party/islpp/isl_pw_eval.c",
            "third-party/islpp/isl_union_single.c",
            "third-party/islpp/isl_union_eval.c",
            "third-party/islpp/isl_union_neg.c",
            "third-party/islpp/isl_multi_no_explicit_domain.c",
            "third-party/islpp/isl_multi_dims.c",
                 "third-party/islpp/*inl.c"]),
    copts = ["-Iexternal/isl -Ithird-party/islpp -Ithird-party/islpp/include -Iisl_interface/include"],
    linkopts = ["-lgmp"],
)

# Core library
cc_library(
    name = "tc_core",
    srcs = glob([
        "tc/core/*.cc",
        "tc/core/polyhedral/*.cc",
        "tc/core/cpu/*.cc",
        "tc/core/polyhedral/cpu/*.cc"]),
    hdrs = glob([
        "tc/core/*.h",
        "tc/core/polyhedral/*.h",
        "tc/utils/*.h",
        "tc/core/utils/*.h",
        "tc/external/*.h",
        "tc/external/detail/*.h",
        "tc/core/polyhedral/cpu/*.h",
        "tc/core/cpu/*.h"]),
    deps = [":tc_lang",
            ":tc_version",
            ":tc_isl",
            "//tc/proto:mapping_options_cc_proto",
            "//tc/proto:compcache_cc_proto",
            "@com_github_google_glog//:glog",
            "@com_github_dmlc_dlpack//:dlpack",
            "@conda_llvm//:conda_llvm_lib",
            "@conda_halide//:conda_halide_lib"],
    copts = ["-Itc/version",
             "-Iisl_interface/include",
             "-Ithird-party/islpp/include",
             "-Iexternal/git_halide/include",
             "-Iexternal/com_github_dmlc_dlpack/include"]
)

# Core tests
cc_binary(
    name = "test_core",
    srcs = glob([
        "test/test_core.cc",
        "tc/library/*.h"]),
    deps = [":tc_core",
            "@com_github_google_googletest//:gtest"],
    copts = ["-Itc/version",
             "-Iisl_interface/include",
             "-Ithird-party/islpp/include",
             "-Iexternal/git_halide/include",
             "-Iexternal/com_github_dmlc_dlpack/include"]
)

# Aten library
cc_library(
    name = "tc_aten",
    srcs = ["tc/aten/aten_compiler.cc"],
    hdrs = glob(["tc/aten/*.h"]),
    deps = [":tc_core", "@conda_aten//:aten_headers"],
    copts = ["-Itc/version",
             "-Iisl_interface/include",
             "-Ithird-party/islpp/include",
             "-Iexternal/git_halide/include",
             "-Iexternal/com_github_dmlc_dlpack/include"]
)

# Core test with LLVM and ATen
cc_binary(
    name = "test_mapper_llvm",
    srcs = ["test/test_mapper_llvm.cc",
            "test/test_harness_aten.h"],
    deps = [":tc_aten",
            "@com_github_google_googletest//:gtest",
            ],
    copts = ["-Itc/version",
             "-Iisl_interface/include",
             "-Ithird-party/islpp/include",
             "-Iexternal/halide/include",
             "-Iexternal/com_github_dmlc_dlpack/include"]
)
